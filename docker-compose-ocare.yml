version: '3.4' # specify docker-compose version

services:

  nginx-proxy:
    image: hantsy/nginx-proxy
    ports:
      - "80:80"
    networks:
      - frontend
      - backend
    depends_on:
      - auth-service
      - user-service
      - post-service
    deploy:
      mode: replicated
      replicas: 2
      labels: [APP=GATEWAY]
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 120s
      placement:
        constraints: [node.role == manager]
  
  auth-service:
    image: hantsy/auth-service
    environment:
      SERVICES_USER_SERVICE_URL: http://user-service:8001
      SPRING_REDIS_HOST: redis
    ports:
      - "8000:8000" #specify ports forewarding
    networks:
      - backend
    depends_on:
      - redis
      - user-service
    deploy:
      replicas: 1
      labels: [APP=AUTHSERVICE]
      update_config:
        parallelism: 2
      restart_policy:
        condition: on-failure
  
  user-service: 
    image: hantsy/user-service
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://userdb:3306/userdb
      SPRING_REDIS_HOST: redis
    ports:
      - "8001:8001" #specify ports forewarding
    networks:
      - backend
    depends_on:
      - redis
      - userdb
    deploy:
      replicas: 1
      labels: [APP=USERSERVICE]
      update_config:
        parallelism: 2
        delay: 10s
      restart_policy:
        condition: on-failure

  post-service: 
    image: hantsy/post-service
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postdb:5432/postdb
      SPRING_REDIS_HOST: redis
    ports:
      - "8002:8002" #specify ports forewarding
    networks:
      - backend
    depends_on:
      - redis
      - postdb
    deploy:
      replicas: 3
      labels: [APP=POSTSERVICE]
      update_config:
        parallelism: 2
        delay: 10s
      restart_policy:
        condition: on-failure
        
  visualizer:
    image: dockersamples/visualizer:stable
    ports:
      - "8080:8080"
    stop_grace_period: 1m30s
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    networks:
      - frontend  
    deploy:
      placement:
        constraints: [node.role == manager]

  userdb:
    image: mysql
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: mysecret
      MYSQL_USER: user
      MYSQL_PASSWORD: password
      MYSQL_DATABASE: userdb
    volumes:
      - userdata:/var/lib/mysql
    networks:
      - backend
    deploy:
      placement:
        constraints: [node.role == worker]
        
  postdb:
    image: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_PASSWORD: password
      POSTGRES_DB: postdb
    volumes:
      - postdata:/var/lib/mysql    
    networks:
      - backend
    deploy:
      placement:
        constraints: [node.role == worker]
  
  redis:
    image: redis
    ports:
      - "6379:6379"  
    networks:
      - backend
    deploy:
      replicas: 1
      update_config:
        parallelism: 2
        delay: 10s
      restart_policy:
        condition: on-failure 
      placement:
        constraints: [node.role == worker]
        
networks:
  frontend:
  backend:

volumes:
  userdata:
  postdata: